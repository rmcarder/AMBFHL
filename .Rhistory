refugee=max(refugee))%>%
mutate(sum=migration+migrant+border+refugee)
Migration<-MasterTextDataset%>%
mutate(migration=ifelse(str_detect(ProposalSummary,"migration"),1,0),
migrant=ifelse(str_detect(ProposalSummary,"migrant"),1,0),
border=ifelse(str_detect(ProposalSummary,"border"),1,0),
refugee=ifelse(str_detect(ProposalSummary,"refugee"),1,0))%>%
group_by(RequestID)%>%
summarise(migration=max(migration),
migrant=max(migrant),
border=max(border),
refugee=max(refugee))%>%
mutate(sum=migration+migrant+border+refugee)%>%
filter(sum!=0)
# install.packages("tidyverse")
#install.packages("googlesheets4")
#install.packages("googlesheets4")
#install.packages("formattable")
#install.packages("htmltools")
#install.packages("geojsonio")
library(googlesheets4)
library(formattable)
library(kableExtra)
library(ggthemes)
library(knitr)
library(tidycensus)
library(htmltools)
library(webshot)
library(sf)
library(haven)
library(jsonlite)
library(geojsonio)
library(tidyverse)
#This script extracts ACS 5-year estimates at the block group (or any larger
#geography) using the tidycensus package. To run tidycensus, you first need
#to set up a Census API key and run census_api_key(). Set working directory
#to where you want output files to save, or use the collect_acs_data function
#to set a different outpath.
#
setwd("C:/Users/rcarder/Documents/dev/AMBFHL")
nhl_raw<-read_sheet("https://docs.google.com/spreadsheets/d/1hkVB4eg3x_jTpcbxqyRVuGmie4AnrNifczxVdi_wum4/edit#gid=1609610797")%>%
mutate(id=row_number())%>%
pivot_longer(cols=starts_with("Teams"),
names_to="Player",
values_to="side")%>%
filter(!is.na(side))%>%
mutate(WL=ifelse(side=="Home Team"&`Home Score`>`Away Score`,"W",
ifelse(side=="Home Team"&`Home Score`<`Away Score`,"L",
ifelse(side=="Away Team"&`Home Score`<`Away Score`,"W","L" ))))%>%
mutate(W=ifelse(WL=="W",1,0),
L=ifelse(WL=="L",1,0),
OTL=ifelse(WL=="L"&`OT/SO`=="Yes",1,0),
GF=ifelse(side=="Home Team",`Home Score`,`Away Score`),
GA=ifelse(side=="Home Team",`Away Score`,`Home Score`))%>%
mutate(GD=GF-GA)%>%
mutate(Team=str_replace(Player,"Teams ",""))%>%
mutate(Team=substring(Team,2))%>%
mutate(Team=substring(Team,1,(str_length(Team)-1)))%>%
mutate(OTL=ifelse(is.na(OTL),0,OTL))%>%
mutate(RawScore=W-L+(.5*OTL)+(GD/10))%>%
mutate(mult=ifelse(`Game Type`=="Exhibition",.5,
ifelse(`Game Type`=="Round Robin",1,
ifelse(`Game Type`=="Tournament Bracket"&WL=="W",1.5,
ifelse(`Game Type`=="Championship"&WL=="W",2,1)))),
rating=mult*RawScore)
write.csv(UltimateStandings,"UltimateStandings.csv",row.names = FALSE)
nhl_raw<-read_sheet("https://docs.google.com/spreadsheets/d/1hkVB4eg3x_jTpcbxqyRVuGmie4AnrNifczxVdi_wum4/edit#gid=1609610797")%>%
mutate(id=row_number())%>%
pivot_longer(cols=starts_with("Teams"),
names_to="Player",
values_to="side")%>%
filter(!is.na(side))%>%
mutate(WL=ifelse(side=="Home Team"&`Home Score`>`Away Score`,"W",
ifelse(side=="Home Team"&`Home Score`<`Away Score`,"L",
ifelse(side=="Away Team"&`Home Score`<`Away Score`,"W","L" ))))%>%
mutate(W=ifelse(WL=="W",1,0),
L=ifelse(WL=="L",1,0),
OTL=ifelse(WL=="L"&`OT/SO`=="Yes",1,0),
GF=ifelse(side=="Home Team",`Home Score`,`Away Score`),
GA=ifelse(side=="Home Team",`Away Score`,`Home Score`))%>%
mutate(GD=GF-GA)%>%
mutate(Team=str_replace(Player,"Teams ",""))%>%
mutate(Team=substring(Team,2))%>%
mutate(Team=substring(Team,1,(str_length(Team)-1)))%>%
mutate(OTL=ifelse(is.na(OTL),0,OTL))%>%
mutate(RawScore=W-L+(.5*OTL)+(GD/10))%>%
mutate(mult=ifelse(`Game Type`=="Exhibition",.5,
ifelse(`Game Type`=="Round Robin",1,
ifelse(`Game Type`=="Tournament Bracket"&WL=="W",1.5,
ifelse(`Game Type`=="Championship"&WL=="W",2,1)))),
rating=mult*RawScore)
UltimateStandings<-nhl_raw%>%
group_by(Team)%>%
summarize(W=sum(W),L=sum(L),OL=sum(OTL),GF=sum(GF),GA=sum(GA),GD=sum(GD),Rating=sum(rating))%>%
mutate(GP=W+L,
Pt=2*W+1*OL,
UR=round(Rating/GP,2),
offset=ifelse(UR>=0,20,-20))
write.csv(UltimateStandings,"UltimateStandings.csv",row.names = FALSE)
library(rayshader)
# install.packages("magick")
library(magick)
library(textdata)
library(gganimate)
library(tidytext)
library(RODBC)           # Provides database connectivity
library(dplyr)           # only used for nice format of Head() function here
library(gridExtra)
library(forcats)
library(grid)
library(DescTools)
library(devtools)
library(fitdistrplus)
library(RGraphics)
library(ggforce) # for 'geom_arc_bar'
library(reshape)
library(stringr)
library(tidyr)
library(timeDate)
library(lubridate)
library(RJSONIO)
library(maps)
library(mapdata)
library(geosphere)
library(ggmap)
library(ggplot2)
library(tools)
library(mapplots)
library(viridis)
library(ggrepel)
library(formattable)
library(extrafont)
library(alluvial)
library(ggalluvial)
library(waffle)
library(directlabels)
library(urbnmapr)
library(statebins)
library(rworldmap)
library(topicmodels)
Migration<-MasterTextDataset%>%
mutate(migration=ifelse(str_detect(ProposalSummary,"migration"),1,0),
migrant=ifelse(str_detect(ProposalSummary,"migrant"),1,0),
border=ifelse(str_detect(ProposalSummary,"border"),1,0),
refugee=ifelse(str_detect(ProposalSummary,"refugee"),1,0))%>%
group_by(RequestID)%>%
summarise(migration=max(migration),
migrant=max(migrant),
border=max(border),
refugee=max(refugee),
ProposalSummary=slice(which.max(nchar(as.character(ProposalSummary)))))%>%
mutate(sum=migration+migrant+border+refugee)%>%
filter(sum!=0)
Migration<-MasterTextDataset%>%
mutate(migration=ifelse(str_detect(ProposalSummary,"migration"),1,0),
migrant=ifelse(str_detect(ProposalSummary,"migrant"),1,0),
border=ifelse(str_detect(ProposalSummary,"border"),1,0),
refugee=ifelse(str_detect(ProposalSummary,"refugee"),1,0))%>%
group_by(RequestID)%>%
summarise(migration=max(migration),
migrant=max(migrant),
border=max(border),
refugee=max(refugee),
ProposalSummary=slice(which.max(nchar(as.character(ProposalSummary)))))
nchar(as.character(ProposalSummary)
Migration<-MasterTextDataset%>%
group_by(RequestID)%>%
slice(which.max(nchar(as.character(ProposalSummary)))))
Migration<-MasterTextDataset%>%
group_by(RequestID)%>%
slice(which.max(nchar(as.character(ProposalSummary))))
View(Migration)
mutate(migration=ifelse(str_detect(ProposalSummary,"migration"),1,0),
migrant=ifelse(str_detect(ProposalSummary,"migrant"),1,0),
border=ifelse(str_detect(ProposalSummary,"border"),1,0),
refugee=ifelse(str_detect(ProposalSummary,"refugee"),1,0))%>%
mutate(sum=migration+migrant+border+refugee)%>%
filter(sum!=0)
Migration<-MasterTextDataset%>%
group_by(RequestID)%>%
slice(which.max(nchar(as.character(ProposalSummary))))%>%
mutate(migration=ifelse(str_detect(ProposalSummary,"migration"),1,0),
migrant=ifelse(str_detect(ProposalSummary,"migrant"),1,0),
border=ifelse(str_detect(ProposalSummary,"border"),1,0),
refugee=ifelse(str_detect(ProposalSummary,"refugee"),1,0))%>%
mutate(sum=migration+migrant+border+refugee)%>%
filter(sum!=0)
Migration<-MasterTextDataset%>%
group_by(RequestID)%>%
slice(which.max(nchar(as.character(ProposalSummary))))%>%
mutate(migration=ifelse(str_detect(ProposalSummary,"migration"),1,0),
migrant=ifelse(str_detect(ProposalSummary,"migrant"),1,0),
border=ifelse(str_detect(ProposalSummary,"border"),1,0),
refugee=ifelse(str_detect(ProposalSummary,"refugee"),1,0))%>%
mutate(sum=migration+migrant+border+refugee)%>%
filter(sum!=0)
##Unnest tokens
Migration_words <- Migration %>%
dplyr::select(RequestID,ProposalSummary) %>%
unnest_tokens(word, ProposalSummary)%>%
anti_join(stop)%>%
anti_join(add_stop_words)
library(tidytext)
##Unnest tokens
Migration_words <- Migration %>%
dplyr::select(RequestID,ProposalSummary) %>%
unnest_tokens(word, ProposalSummary)%>%
anti_join(stop)%>%
anti_join(add_stop_words)
Migration_words <- Migration %>%
dplyr::select(RequestID,ProposalSummary)
Migration_words <- Migration %>%
dplyr::select(RequestID,ProposalSummary) %>%
unnest_tokens(word, ProposalSummary)
Migration_words <- Migration %>%
dplyr::select(RequestID,ProposalSummary) %>%
unnest_tokens(word, ProposalSummary)%>%
anti_join(stop)
## ##edit stop words for overall WPF text analysis
stop<-stop_words
stop<-stop_words%>%
filter(word!=c("general"))
add_stop_words<-tibble(line=1:5,word=c("grant","000","wellspring","cs","grants"))
View(add_stop_words)
add_stop_words<-tibble(line=1:5,word=c("grant","000","wellspring","cs","grants"))
Migration<-MasterTextDataset%>%
group_by(RequestID)%>%
slice(which.max(nchar(as.character(ProposalSummary))))%>%
mutate(migration=ifelse(str_detect(ProposalSummary,"migration"),1,0),
migrant=ifelse(str_detect(ProposalSummary,"migrant"),1,0),
border=ifelse(str_detect(ProposalSummary,"border"),1,0),
refugee=ifelse(str_detect(ProposalSummary,"refugee"),1,0))%>%
mutate(sum=migration+migrant+border+refugee)%>%
filter(sum!=0)
##Unnest tokens
Migration_words <- Migration %>%
dplyr::select(RequestID,ProposalSummary) %>%
unnest_tokens(word, ProposalSummary)%>%
anti_join(stop)%>%
anti_join(add_stop_words)
total_words <- Migration_words %>%
group_by(word) %>%
summarize(total = n())
View(total_words)
Migration<-MasterTextDataset%>%
group_by(RequestID)%>%
slice(which.max(nchar(as.character(ProposalSummary))))%>%
mutate(migration=ifelse(str_detect(ProposalSummary,"migration"),1,0),
migrant=ifelse(str_detect(ProposalSummary,"migrant"),1,0),
border=ifelse(str_detect(ProposalSummary,"border"),1,0),
refugee=ifelse(str_detect(ProposalSummary,"refugee"),1,0))%>%
mutate(sum=migration+migrant+border+refugee)%>%
filter(sum!=0)
##Unnest tokens
Migration_words <- Migration %>%
dplyr::select(RequestID,ProposalSummary) %>%
unnest_tokens(word, ProposalSummary)%>%
anti_join(stop)%>%
anti_join(add_stop_words)
total_words <- Migration_words %>%
group_by(word) %>%
summarize(total = n())
word_count <- request_words %>%
group_by(RequestID) %>%
summarize(total = n())
word_count <- Migration_words %>%
group_by(RequestID) %>%
summarize(total = n())
View(word_count)
request_words_totals<-Migration_words%>%
group_by(RequestID,word)%>%
summarise(n=n())
View(request_words_totals)
Migration<-MasterTextDataset%>%
group_by(RequestID)%>%
slice(which.max(nchar(as.character(ProposalSummary))))%>%
mutate(migration=ifelse(str_detect(ProposalSummary,"migration"),1,0),
migrant=ifelse(str_detect(ProposalSummary,"migrant"),1,0),
border=ifelse(str_detect(ProposalSummary,"border"),1,0),
refugee=ifelse(str_detect(ProposalSummary,"refugee"),1,0))%>%
mutate(sum=migration+migrant+border+refugee)%>%
filter(sum!=0)
setwd("C:/Users/rcarder/Documents/dev/wpf/Quarterly")
write.csv(Migration,"Migration.csv",row.names = FALSE)
request_words_totals<-Migration_words%>%
group_by(RequestID,word)%>%
summarise(n=n())
##create a document-term matrix
requests_dtm <- request_words_totals %>%
cast_dtm(RequestID, word, n)
requests_lda <- LDA(requests_dtm, k = 16, control = list(seed = 1234))
requests_lda
##Beta is the probability of the term being associated with the topic
request_topics <- tidy(requests_lda, matrix = "beta")
View(request_topics)
request_top_terms <- request_topics %>%
group_by(topic) %>%
top_n(12, beta) %>%
ungroup() %>%
arrange(topic, -beta)
request_top_terms %>%
mutate(term = reorder_within(term, beta, topic)) %>%
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip() +
scale_x_reordered()
add_stop_words<-tibble(line=1:5,word=c("grant","000","wellspring","cs","grants","project"))
## ##edit stop words for overall WPF text analysis
stop<-stop_words
stop<-stop_words%>%
filter(word!=c("general"))
add_stop_words<-tibble(line=1:5,word=c("grant","000","wellspring","cs","grants","project"))
add_stop_words<-tibble(line=1:6,word=c("grant","000","wellspring","cs","grants","project"))
Migration<-MasterTextDataset%>%
group_by(RequestID)%>%
slice(which.max(nchar(as.character(ProposalSummary))))%>%
mutate(migration=ifelse(str_detect(ProposalSummary,"migration"),1,0),
migrant=ifelse(str_detect(ProposalSummary,"migrant"),1,0),
border=ifelse(str_detect(ProposalSummary,"border"),1,0),
refugee=ifelse(str_detect(ProposalSummary,"refugee"),1,0))%>%
mutate(sum=migration+migrant+border+refugee)%>%
filter(sum!=0)
#write.csv(Migration,"Migration.csv",row.names = FALSE)
##Unnest tokens
Migration_words <- Migration %>%
dplyr::select(RequestID,ProposalSummary) %>%
unnest_tokens(word, ProposalSummary)%>%
anti_join(stop)%>%
anti_join(add_stop_words)
total_words <- Migration_words %>%
group_by(word) %>%
summarize(total = n())
word_count <- Migration_words %>%
group_by(RequestID) %>%
summarize(total = n())
request_words_totals<-Migration_words%>%
group_by(RequestID,word)%>%
summarise(n=n())
##create a document-term matrix
requests_dtm <- request_words_totals %>%
cast_dtm(RequestID, word, n)
requests_lda <- LDA(requests_dtm, k = 8, control = list(seed = 1234))
requests_lda
##Beta is the probability of the term being associated with the topic
request_topics <- tidy(requests_lda, matrix = "beta")
request_top_terms <- request_topics %>%
group_by(topic) %>%
top_n(12, beta) %>%
ungroup() %>%
arrange(topic, -beta)
request_top_terms %>%
mutate(term = reorder_within(term, beta, topic)) %>%
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip() +
scale_x_reordered()
request_topic_probabilities <- tidy(requests_lda, matrix = "gamma")
View(request_topic_probabilities)
request_topic_probabilities <- tidy(requests_lda, matrix = "gamma")%>%
filter(gamma>=.05)
request_topic_probabilities <- tidy(requests_lda, matrix = "gamma")%>%
filter(gamma>=.01)
request_topic_probabilities <- tidy(requests_lda, matrix = "gamma")%>%
filter(gamma>=.02)
# filter(gamma>=.02)%>%
left_join(payments,by=c("RequestID"="RequestId")
request_topic_probabilities <- tidy(requests_lda, matrix = "gamma")%>%
# filter(gamma>=.02)%>%
left_join(payments,by=c("RequestID"="RequestId"))
request_topic_probabilities <- tidy(requests_lda, matrix = "gamma")%>%
left_join(payments,by=c("RequestID"="RequestId"))
request_topic_probabilities <- tidy(requests_lda, matrix = "gamma")%>%
left_join(payments,by=c("document"="RequestId"))
request_topic_probabilities <- tidy(requests_lda, matrix = "gamma")%>%
mutate(document=as.numeric(document))%>%
left_join(payments,by=c("document"="RequestId"))
install.packages('mapdeck')
library(tidycensus)
---
title: "Gather EP Related ACS Data"
author: "Rich Carder"
date: "February 13, 2020"
output: html_document
---
# install.packages("tidyverse")
#install.packages("googlesheets4")
#install.packages("googlesheets4")
#install.packages("formattable")
#install.packages("htmltools")
#install.packages("geojsonio")
library(googlesheets4)
library(formattable)
library(kableExtra)
library(ggthemes)
library(knitr)
library(tidycensus)
library(htmltools)
library(webshot)
library(sf)
library(haven)
library(jsonlite)
library(geojsonio)
library(tidyverse)
#This script extracts ACS 5-year estimates at the block group (or any larger
#geography) using the tidycensus package. To run tidycensus, you first need
#to set up a Census API key and run census_api_key(). Set working directory
#to where you want output files to save, or use the collect_acs_data function
#to set a different outpath.
#
setwd("C:/Users/rcarder/Documents/dev/AMBFHL")
nhl_raw<-read_sheet("https://docs.google.com/spreadsheets/d/1hkVB4eg3x_jTpcbxqyRVuGmie4AnrNifczxVdi_wum4/edit#gid=1609610797")%>%
mutate(id=row_number())%>%
pivot_longer(cols=starts_with("Teams"),
names_to="Player",
values_to="side")%>%
filter(!is.na(side))%>%
mutate(WL=ifelse(side=="Home Team"&`Home Score`>`Away Score`,"W",
ifelse(side=="Home Team"&`Home Score`<`Away Score`,"L",
ifelse(side=="Away Team"&`Home Score`<`Away Score`,"W","L" ))))%>%
mutate(W=ifelse(WL=="W",1,0),
L=ifelse(WL=="L",1,0),
OTL=ifelse(WL=="L"&`OT/SO`=="Yes",1,0),
GF=ifelse(side=="Home Team",`Home Score`,`Away Score`),
GA=ifelse(side=="Home Team",`Away Score`,`Home Score`))%>%
mutate(GD=GF-GA)%>%
mutate(Team=str_replace(Player,"Teams ",""))%>%
mutate(Team=substring(Team,2))%>%
mutate(Team=substring(Team,1,(str_length(Team)-1)))%>%
mutate(OTL=ifelse(is.na(OTL),0,OTL))%>%
mutate(RawScore=W-L+(.5*OTL)+(GD/10))%>%
mutate(mult=ifelse(`Game Type`=="Exhibition",.5,
ifelse(`Game Type`=="Round Robin",1,
ifelse(`Game Type`=="Tournament Bracket"&WL=="W",1.5,
ifelse(`Game Type`=="Championship"&WL=="W",2,1)))),
rating=mult*RawScore)
#filter(Timestamp>=as.POSIXct("2020-04-11 12:00:00"))
UltimateStandings<-nhl_raw%>%
group_by(Team)%>%
summarize(W=sum(W),L=sum(L),OL=sum(OTL),GF=sum(GF),GA=sum(GA),GD=sum(GD),Rating=sum(rating))%>%
mutate(GP=W+L,
Pt=2*W+1*OL,
UR=round(Rating/GP,2),
offset=ifelse(UR>=0,20,-20))
tourneygames<-nhl_raw%>%
filter(Timestamp>=as.POSIXct("2020-04-11 12:00:00"))%>%
#filter(`Game Type`=="Round Robin")%>%
group_by(id)%>%
summarize(Away=paste(Team[side=="Away Team"],collapse=", "),
AwayScore=first(`Away Score`),
HomeScore=first(`Home Score`),
Home=paste(Team[side=="Home Team"],collapse=", "),
OT=first(`OT/SO`))
allgames<-nhl_raw%>%
# filter(Timestamp>=as.POSIXct("2020-04-11 12:00:00"))%>%
#filter(`Game Type`=="Round Robin")%>%
group_by(id)%>%
summarize(Away=paste(Team[side=="Away Team"],collapse=", "),
AwayScore=first(`Away Score`),
HomeScore=first(`Home Score`),
Home=paste(Team[side=="Home Team"],collapse=", "),
OT=first(`OT/SO`))
standings1<-tourneygames%>%
mutate(homewin=ifelse(HomeScore>AwayScore,1,0),
homeloss=ifelse(HomeScore<AwayScore,1,0),
homeotl=ifelse(HomeScore<AwayScore&OT=="Yes",1,0),)%>%
mutate(homeotl=ifelse(is.na(homeotl),0,homeotl))%>%
group_by(Home)%>%
summarize(W=sum(homewin),L=sum(homeloss),OTL=sum(homeotl),GF=sum(HomeScore),GA=sum(AwayScore))%>%
dplyr::rename("Team"=1)%>%
mutate(OTL=ifelse(is.na(OTL),0,OTL))
standings2<-games%>%
mutate(awaywin=ifelse(HomeScore<AwayScore,1,0),
awayloss=ifelse(HomeScore>AwayScore,1,0),
awayotl=ifelse(HomeScore>AwayScore&OT=="Yes",1,0))%>%
mutate(awayotl=ifelse(is.na(awayotl),0,awayotl))%>%
group_by(Away)%>%
summarize(W=sum(awaywin),L=sum(awayloss),OTL=sum(awayotl),GF=sum(AwayScore),GA=sum(HomeScore))%>%
dplyr::rename("Team"=1)%>%
mutate(OTL=ifelse(is.na(OTL),0,OTL))
standings<-bind_rows(standings1,standings2)%>%
group_by(Team)%>%
summarize(W=sum(W),L=sum(L),OTL=sum(OTL),GF=sum(GF),GA=sum(GA),GD=GF-GA)%>%
mutate(Pts=(W*2)+OTL)
UltimateStandings<-nhl_raw%>%
group_by(Team)%>%
summarize(W=sum(W),L=sum(L),OL=sum(OTL),GF=sum(GF),GA=sum(GA),GD=sum(GD),Rating=sum(rating))%>%
mutate(GP=W+L,
Pt=2*W+1*OL,
UR=round(Rating/GP,2),
offset=ifelse(UR>=0,20,-20))
write.csv(UltimateStandings,"UltimateStandings.csv",row.names = FALSE)
write.csv(UltimateStandings,"UltimateStandings.csv",row.names = FALSE)
DisplayStandings<-UltimateStandings%>%
dplyr::select(1,2,3,6,9,10)
write.csv(DisplayStandings,"UltimateStandings.csv",row.names = FALSE)
DisplayStandings<-UltimateStandings%>%
dplyr::select(1,2,3,6,9,10)
UltimateStandings
DisplayStandings<-UltimateStandings%>%
dplyr::select(1,2,3,4,7,9,10)
DisplayStandings<-UltimateStandings%>%
dplyr::select(1,2,3,4,7,10,11)
---
# install.packages("tidyverse")
#install.packages("googlesheets4")
#install.packages("googlesheets4")
#install.packages("formattable")
#install.packages("htmltools")
#install.packages("geojsonio")
devtools::install_github("tidyverse/googlesheets4")
